#!/usr/bin/env bash

set -euo pipefail

function help() {
	cat <<EOL
Usage: ${0} [-a] [-e project] [-i project] [-j project] [-p -f -s -t -b -m -o -h]
	-a 			Create a guesstimate of .pommit_projs.
	-i PROJECT		Include only PROJECT. Multiple includes allowed.
	-e PROJECT		Exclude PROJECT. Multiple excludes allowed.
	-j PROJECT		Jump to, or skip everything before, PROJECT.
	-p			Pull from remote. Implies Only master.
	-f			Fetch from remote
	-t			List stashes
	-b			List branches
	-m			Only master. Skip every PROJECT not tracking master-branch
	-o			Only changed. Skip every PROJECT not having changes locally or remotely
	-h			This message
EOL
exit 0
}

git_update="true"
git_status=""
exclude=""
include=""
git_fetch="true"
only_master=""
only_changed=""
jump=""
while getopts "ae:i:j:pfstbmoh" OPT; do
	case $OPT in
	a)
		echo Initializing .pommit_projs
		echo 'PROJS=""' >>.pommit_projs
		# shellcheck disable=SC2016
		find . -maxdepth 1 -mindepth 1 -type d -exec echo 'PROJS="$PROJS {}"' ';' |
			sed -e s_\./__ |
			tee .pommit_projs
		echo "done"
		exit 0
		;;
	b)
		git_status="git branch -vv"
		;;
	e)
		pro=$(echo "$OPTARG" | sed -e 's/\/$//')
		exclude="$exclude $pro"
		;;
	f)
		git_fetch="git fetch --quiet"
		;;
	h)
		help
		;;
	i)
		pro=$(echo "$OPTARG" | sed -e 's/\/$//')
		include="$include $pro "
		;;
	j)
		jump=$(echo "$OPTARG" | sed -e 's/\/$//')
		;;
	m)
		only_master="true"
		;;
	o)
		only_changed="true"
		;;
	p)
		git_update="git pull --rebase"
		only_master="true"
		;;
	s)
		git_status="git status --short --branch"
		;;
	t)
		git_status="git stash list"
		;;
	*)
		echo "Unknown option"
		exit 1
		;;
	esac
done

fail_on_error() {
	echo "$1"
	exit 1
}

if [[ -f .pommit_projs ]]; then
	# shellcheck disable=SC1091
	. .pommit_projs
else
	fail_on_error "Not initialized."
	exit 1
fi

REAL_PROJS=""
for pro in $PROJS; do
	if [[ $exclude == *" $pro"* ]]; then continue; fi
	if [[ -n "$include" ]] && [[ $include != *" $pro"* ]]; then continue; fi
	if [[ -n "$jump" ]] && [[ "$jump" != "$pro" ]]; then continue; fi
	jump=""

	if [[ -n "$only_master" ]] && [[ $(
		cd "$pro"
		git status -bs
	) != *"## master"* ]]; then continue; fi

	if [[ -n "$git_fetch" ]]; then (
		cd "$pro"
		$git_fetch || fail_on_error "Fetching $pro failed"
	); fi

	if [[ -n "$only_changed" ]]; then
		if [[ $(
			cd "$pro"
			git status -bs
		) == "## master...origin/master" ]]; then continue; fi
	fi
	REAL_PROJS="$REAL_PROJS $pro"
done

if [[ -n "$git_status" ]]; then
	for pro in $REAL_PROJS; do
		(
			cd "$pro"
			pwd && $git_status && echo -e ""
		)
	done
	exit 0
fi

for pro in $REAL_PROJS; do
	(
		cd "$pro"
		if [[ -n "$git_update" ]]; then
			$git_update || fail_on_error "Git operation failed on $pro"
		fi
	)
done
