#!/usr/bin/env bash

set -euo pipefail

git_update="true"
git_status=""
mvn=""
mvn_install=""
mvn_update=""
exclude=""
include=""
git_fetch="true"
only_master=""
only_changed=""
jump=""
while getopts "abce:fgi:j:morstu" OPT;
do
	case $OPT in
		a)
			echo Initializing .pommit_projs
      echo 'PROJS=""' >> .pommit_projs 
      # shellcheck disable=SC2016
			find . -maxdepth 1 -mindepth 1 -type d -exec echo 'PROJS="$PROJS {}"' ';' \
				| sed -e s_\./__ \
				| tee .pommit_projs
			echo "done"
			exit 0
			;;
		e)
			pro=${$OPTARG/\/$//}
			exclude="$exclude $pro"
			;;
		i)
			pro=${$OPTARG/\/$//}
			include="$include $pro "
			;;
		b)
			mvn="mvn"
			mvn_install="install"
			;;
		c)
			mvn="mvn"
			mvn_clean="clean"
			;;
		u)
			mvn_update="-U"
			;;
		g)
			git_update="git pull --rebase"
			;;
		f)
			git_fetch="git fetch --quiet"
			;;
		s)
			git_status="git status --short --branch"
			;;
		t)
			git_status="git stash list"
			;;
		r)
			git_status="git branch -vv"
			;;
		m)
			only_master="true"
			;;
		o)
			only_changed="true"
			;;
		j)
			jump=${$OPTARG/\/$//}
			;;
    *)
      echo "Unknown option"
      exit 1
      ;;
	esac
done

if [[ -f .pommit_projs ]];
then
  # shellcheck disable=SC1091
	. .pommit_projs
else
	echo "Not initialized."
	exit 1
fi

REAL_PROJS=""
for pro in $PROJS; do
  if [[ $exclude == *" $pro "* ]]; then continue; fi
  if [[ -n "$include" ]] && [[ $include != *" $pro "* ]]; then continue; fi
  if [[ -n "$only_master" ]] && [[ $(cd "$pro"; git status -bs) != *"## master"* ]]; then continue; fi
  if [[ -n "$jump" ]] && [[ "$jump" != "$pro" ]]; then continue; fi
  jump=""

  if [[ -n "$git_fetch" ]]; then (cd "$pro" ; $git_fetch); fi

  if [[ -n "$only_changed" ]]; then
    if [[ $(cd "$pro" ; git status -bs) == "## master...origin/master" ]]; then continue; fi
  fi
  REAL_PROJS="$REAL_PROJS $pro"
done

if [[ -n "$git_status" ]]; then
	for pro in $REAL_PROJS; do
    (cd "$pro"; pwd && $git_status && echo -e "")
	done
	exit 0
fi

for pro in $REAL_PROJS; do
	(cd "$pro"
    if [[ -n "$git_update" ]]; then
      $git_update
    fi

    if [[ -n "$mvn" ]] && [[ -f "pom.xml" ]]; then
      $mvn $mvn_clean $mvn_install $mvn_update
    fi
  )
done
